[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cppSim authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivann Schlosser. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schlosser (2024). cppSim: Fast memory efficient spatial interaction models. R package version 0.0.0.9000.","code":"@Manual{,   title = {cppSim: Fast and memory efficient spatial interaction models},   author = {Ivann Schlosser},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"cppsim","dir":"","previous_headings":"","what":"Fast and memory efficient spatial interaction models","title":"Fast and memory efficient spatial interaction models","text":"package early versions development, aims providing set fast, efficient functions perform Gravity models context spatial interaction modelling. Currently, doubly constrained model implemented future versions aim implement origin destination constraints well. developed context studying commuter flows active travel (cycling & walking ) Great Britain part project CASA, UCL.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and memory efficient spatial interaction models","text":"yet CRAN, please install development version cppSim :","code":"# install.packages(\"devtools\") devtools::install_github(\"ischlo/cppSim\")"},{"path":"/index.html","id":"built-in-data-sets","dir":"","previous_headings":"","what":"Built in data sets","title":"Fast and memory efficient spatial interaction models","text":"package comes sample data sets allow test functions right away well see type input recommended. flows_test : using official census data England 2011, ’s 983x983 matrix representing flows cyclists pedestrians MSOA London. distance_test : distances centroids MSOAs. Computed London road network OpenStreetMap using cppRouting package.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast and memory efficient spatial interaction models","text":"Using built-data sets flows_test distance_test, can run test following example basic example shows solve common problem:","code":"library(cppSim) ## basic example code  data(\"flows_test\") data(\"distance_test\")   model_test <- run_model(flows = flows_test                         ,distance = distance_test)"},{"path":"/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast and memory efficient spatial interaction models","text":"Compared equivalent functions implemented pure R, runs x10 faster.","code":"#>      test replications elapsed relative user.self sys.self user.child sys.child #> 2     cpp           10   3.257    1.000     3.046    0.184          0         0 #> 1 regular           10  34.201   10.501    31.887    1.970          0         0"},{"path":"/reference/calibration_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrating the balancing factors — calibration_cpp","title":"Calibrating the balancing factors — calibration_cpp","text":"Function calibrate B coefficients gravity model iterative process. avoid infinite loop, maximum number iterations fixed 50, usually takes around 5-7 iterations. converge.","code":""},{"path":"/reference/calibration_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrating the balancing factors — calibration_cpp","text":"cost_fun matrix representing cost function f(D), D distance matrix. O numeric column vector weights associated origin, production constraint, usually outbound flow. D numeric row vector destination weights, attraction constraint. delta error term can tolerate convergence values.","code":""},{"path":"/reference/calibration_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrating the balancing factors — calibration_cpp","text":"list object containing B vectors coefficients vector e verify convergence speed.","code":""},{"path":"/reference/calibration_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrating the balancing factors — calibration_cpp","text":"","code":"cost_fun = matrix(data = c(1,2,3,4,5,6,7,8,9), nrow = 3) O = c(1,2,3) D = c(3,2,1)"},{"path":"/reference/distance_test.html","id":null,"dir":"Reference","previous_headings":"","what":"distance_test — distance_test","title":"distance_test — distance_test","text":"distance_test","code":""},{"path":"/reference/distance_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"distance_test — distance_test","text":"","code":"distance_test"},{"path":[]},{"path":"/reference/distance_test.html","id":"distance-test","dir":"Reference","previous_headings":"","what":"distance_test","title":"distance_test — distance_test","text":"983x983 matrix distances MSOAs London. Computed using London road network OpenStreetMap cppRouting package.","code":""},{"path":"/reference/distance_test.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"distance_test — distance_test","text":"Ivann Schlosser, 2022","code":""},{"path":"/reference/flows_test.html","id":null,"dir":"Reference","previous_headings":"","what":"flows_test — flows_test","title":"flows_test — flows_test","text":"flows_test","code":""},{"path":"/reference/flows_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flows_test — flows_test","text":"","code":"flows_test"},{"path":[]},{"path":"/reference/flows_test.html","id":"flows-test","dir":"Reference","previous_headings":"","what":"flows_test","title":"flows_test — flows_test","text":"matrix size 983x983 containing flows users using walking cycling main method commute.","code":""},{"path":"/reference/flows_test.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"flows_test — flows_test","text":"UK Census, 2011","code":""},{"path":"/reference/run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Running doubly constrained model — run_model","title":"Running doubly constrained model — run_model","text":"function C++ implementation run_model, run doubly constrained model","code":""},{"path":"/reference/run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running doubly constrained model — run_model","text":"","code":"run_model(flows, distance, beta = 0.25)"},{"path":"/reference/run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running doubly constrained model — run_model","text":"flows integer matrix Origin-Destination flows. distance distance matrix origins destinations, provide distance km. beta Exponent use calculating cost function.","code":""},{"path":"/reference/run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running doubly constrained model — run_model","text":"list containing integer matrix predicted values.","code":""},{"path":"/reference/run_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running doubly constrained model — run_model","text":"","code":"data(flows_test) data(distance_test)  model_test <- run_model(flows_test,distance_test)"},{"path":"/reference/run_model_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run model — run_model_cpp","title":"Run model — run_model_cpp","text":"function C++ implementation run_model, run model","code":""},{"path":"/reference/run_model_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run model — run_model_cpp","text":"flows integer matrix Origin-Destination flows. distance distance matrix origins destinations. beta Exponent use calculating cost function.","code":""},{"path":"/reference/run_model_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Running a singly constrained model — run_model_single","title":"Running a singly constrained model — run_model_single","text":"function C++ implementation run_model, run singly constrained model must match dimensions, running production constrained model, (dim(distance) == length(flows)) must TRUE values weight provided, vector ones used","code":""},{"path":"/reference/run_model_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running a singly constrained model — run_model_single","text":"","code":"run_model_single(flows, distance, weight = NULL, beta = 0.25)"},{"path":"/reference/run_model_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running a singly constrained model — run_model_single","text":"flows vector either origin (production constrained) destination (attraction constrained) flows. distance distance matrix origins destinations, provide distance km. weight vector weights unconstrained part model. beta Exponent use calculating cost function, default .25.","code":""},{"path":"/reference/run_model_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running a singly constrained model — run_model_single","text":"list containing matrix predicted values.","code":""},{"path":"/reference/run_model_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running a singly constrained model — run_model_single","text":"","code":"data(flows_test) data(distance_test)  flows_test <- apply(flows_test,MARGIN = 1,FUN = sum)  model_test <- run_model_single(flows_test,distance_test)"},{"path":"/reference/simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Running a whole simulation of a doubly constrained gravity model — simulation","title":"Running a whole simulation of a doubly constrained gravity model — simulation","text":"script takes flows data, distance matrix, reference beta parameter finds optimal beta value model, runs , returns result beta best fit. currently exp value accepted cost_fun parameter.","code":""},{"path":"/reference/simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running a whole simulation of a doubly constrained gravity model — simulation","text":"","code":"simulation(flows_matrix, dist_matrix, beta_offset = 0.25)"},{"path":"/reference/simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running a whole simulation of a doubly constrained gravity model — simulation","text":"flows_matrix integer matrix flows dist_matrix distance matrix containing numeric values kilometers beta_offset offset 0 start looking best fit value.","code":""},{"path":"/reference/simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running a whole simulation of a doubly constrained gravity model — simulation","text":"creates folder based run_name parameter images files written. file run_name_best_fit.rds contain matrices values model , quality fit values beta values.","code":""},{"path":"/reference/simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running a whole simulation of a doubly constrained gravity model — simulation","text":"","code":"data(flows_test) data(distance_test)  model <- simulation(flows_test,distance_test)"},{"path":"/news/index.html","id":"cppsim-0009000","dir":"Changelog","previous_headings":"","what":"cppSim 0.0.0.9000","title":"cppSim 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
